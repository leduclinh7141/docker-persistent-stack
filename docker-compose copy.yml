version: '3.8'
networks:
  common:
volumes:
  neo4j-data:
  mongodb-data:
  mongodb-replica-data:
  postgres_data:
  mysql-data:
  redis-data:
  keycloak-data:
  mssql-data:
    driver: local
services:
  # neo4j:
  #     container_name: neo4j
  #     image: neo4j:4.2
  #     # image: discsports/neo4j-apoc
  #     volumes:
  #         - neo4j-data:/data
  #     user: "${UID_GID}"
  #     ports:
  #         - 7474:7474
  #         - 7687:7687
  #     environment:
  #         # - NEO4J_AUTH=none
  #         # - NEO4J_AUTH=neo4j/admin
  #         - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
  #         - NEO4JLABS_PLUGINS=["graph-data-science", "apoc"]
  #         - NEO4J_dbms_security_procedures_whitelist=gds.*, apoc.*
  #         - NEO4J_dbms_security_procedures_unrestricted=gds.*, apoc.*
  #     networks:
  #         - common
  #     restart: always
  # sqlserver:
  #     container_name: sqlserver
  #     image: mcr.microsoft.com/mssql/server:2017-latest
  #     # hostname: sqlserver
  #     ports:
  #         - 1433:1433
  #     volumes:
  #         # - ./init-data:/init-data
  #         # - ./start-up.sh:/start-up.sh
  #         - mssql-data:/var/opt/mssql
  #     # user: "${UID_GID}"
  #     env_file:
  #         - .env
  #     # command: "sh -c 'start-up.sh & /opt/mssql/bin/sqlservr;'"
  #     # environment:
  #     #     - ACCEPT_EULA=Y
  #     #     - SA_PASSWORD=P1assword
  #     #     - MSSQL_COLLATION=Japanese_CI_AS
  #     networks:
  #         - common
  #     restart: always
  redis:
    image: 'bitnami/redis'
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - common
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
  mongo:
    container_name: mongo
    image: mongo:latest
    volumes:
      # - ./data/mongo:/data/db
      - 'mongodb-data:/data/db'
    # user: "${UID_GID}"
    ports:
      - '27017:27017'
    networks:
      - common
    restart: always
  #   mongo-rs:
  #     container_name: mongo-rs
  #     image: linhld/mongodb-replicaset:development
  #     hostname: mongo-rs
  #     volumes:
  #       # - ./data/mongo-rs:/data
  #       - 'mongodb-replica-data:/data'
  #     # user: "${UID_GID}"
  #     ports:
  #       - '27001:27001'
  #       - '27002:27002'
  #       - '27003:27003'
  #     networks:
  #       - common
  #     extra_hosts:
  #       - 'mongo-rs:127.0.0.1'
  #     restart: always
  # eventstore:
  #     container_name: eventstore
  #     image: eventstore/eventstore:latest
  #     # user: "${UID_GID}"
  #     ports:
  #         - "1113:1113"
  #         - "2113:2113"
  #     networks:
  #         - common
  #     restart: always
  #   mysql:
  #     container_name: mysql
  #     image: mysql:5.7
  #     volumes:
  #       - mysql-data:/var/lib/mysql
  #     user: '${UID_GID}'
  #     ports:
  #       - '3306:3306'
  #     environment:
  #       MYSQL_ROOT_PASSWORD: 'justapassword'
  #     networks:
  #       - common
  #     restart: always
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-CU9-ubuntu-16.04
    # volumes are not supported on macOS
    # volumes:
    #   - ~/volumes/jhipster/tempdb/mssql/:/var/opt/mssql/data/
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Express
      - SA_PASSWORD=P1assword
      - MSSQL_DATABASE=gateway
      - MSSQL_SLEEP=60
      - MSSQL_COLLATION=Japanese_CI_AS
    # If you want to expose these ports outside your dev PC,
    # remove the "" prefix
    ports:
      - 1433:1433
    command: /bin/bash -c '/opt/mssql/bin/sqlservr & echo "wait $$MSSQL_SLEEP sec for DB to start "; sleep $$MSSQL_SLEEP; /opt/mssql-tools/bin/sqlcmd -U sa -P $$SA_PASSWORD -d tempdb -q "EXIT(CREATE DATABASE $$MSSQL_DATABASE)"; wait;'
    networks:
      - common
    restart: always
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    # volumes:
    #   - ~/volumes/jhipster/gateway/elasticsearch/:/usr/share/elasticsearch/data/
    # If you want to expose these ports outside your dev PC,
    # remove the "" prefix
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - 'ES_JAVA_OPTS=-Xms1024m -Xmx1024m'
      - 'discovery.type=single-node'
    networks:
      - common
    restart: always
  kafka:
    image: confluentinc/cp-kafka:5.5.3
    # If you want to expose these ports outside your dev PC,
    # remove the "" prefix
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka
    networks:
      - common
    restart: always
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - common
    restart: always
  jhipster-registry:
    image: jhipster/jhipster-registry:v6.7.1
    volumes:
      - ./central-server-config:/central-config
    # When run with the "dev" Spring profile, the JHipster Registry will
    # read the config from the local filesystem (central-server-config directory)
    # When run with the "prod" Spring profile, it will read the configuration from a Git repository
    # See https://www.jhipster.tech/jhipster-registry/#spring-cloud-config
    environment:
      - _JAVA_OPTIONS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=dev,api-docs,oauth2
      - SPRING_SECURITY_USER_PASSWORD=admin
      - JHIPSTER_REGISTRY_PASSWORD=admin
      - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=native
      - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS=file:./central-config/localhost-config/
      # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=git
      # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_URI=https://github.com/jhipster/jhipster-registry/
      # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_PATHS=central-config
      # For keycloak to work, you need to add '127.0.0.1 keycloak' to your hosts file
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI=http://keycloak:9080/auth/realms/jhipster
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=jhipster-registry
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=jhipster-registry
    # If you want to expose these ports outside your dev PC,
    # remove the "" prefix
    ports:
      - 8761:8761
    networks:
      - common
    restart: always
  keycloak:
    image: jboss/keycloak:latest
    command:
      [
        '-b',
        '0.0.0.0',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=dir',
        '-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config',
        '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        '-Djboss.socket.binding.port-offset=1000',
        '-Dkeycloak.profile.feature.upload_scripts=enabled',
      ]
    volumes:
      - ./realm-config:/opt/jboss/keycloak/realm-config
      - keycloak-data:/var/lib/keycloak/data
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=POSTGRES
      - DB_ADDR=postgres
      - DB_DATABASE=keycloak
      - DB_USER=postgres
      - DB_SCHEMA=public
      - DB_PASSWORD=P1assword
    # If you want to expose these ports outside your dev PC,
    # remove the "" prefix
    ports:
      - 9080:9080
      - 9443:9443
      - 10990:10990
    depends_on:
      - postgres
    # networks:
    #   - common
    # restart: always
  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./script-postgresql:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P1assword
      POSTGRES_MULTIPLE_DATABASES: keycloak
    # ports:
    #   - '5432:5432'
    # networks:
    #   - common
    # restart: always
