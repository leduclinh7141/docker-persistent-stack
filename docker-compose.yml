version: '3.8'
networks:
  common:
volumes:
  # neo4j-data:
  #   driver: local
  mongodb-data:
    driver: local
  mongodb-replica-data:
    driver: local
  postgres_data:
    driver: local
  # mysql-data:
  #   driver: local
  redis-data:
    driver: local
  keycloak-data:
    driver: local
  elasticsearch-data:
    driver: local
  graylog_data:
    driver: local
  # mssql-data:
  #   driver: local
services:
  # neo4j:
  #     container_name: neo4j
  #     image: neo4j:4.2
  #     # image: discsports/neo4j-apoc
  #     volumes:
  #         - neo4j-data:/data
  #     user: "${UID_GID}"
  #     ports:
  #         - 7474:7474
  #         - 7687:7687
  #     env_file:
  #         - .env
  #     environment:
  #         # - NEO4J_AUTH=none
  #         # - NEO4J_AUTH=neo4j/admin
  #         - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
  #         - NEO4JLABS_PLUGINS=["graph-data-science", "apoc"]
  #         - NEO4J_dbms_security_procedures_whitelist=gds.*, apoc.*
  #         - NEO4J_dbms_security_procedures_unrestricted=gds.*, apoc.*
  #     networks:
  #         - common
  #     restart: always
  # eventstore:
  #     container_name: eventstore
  #     image: eventstore/eventstore:latest
  #     ports:
  #         - "1113:1113"
  #         - "2113:2113"
  #     networks:
  #         - common
  #     restart: always
  #   mysql:
  #     container_name: mysql
  #     image: mysql:5.7
  #     volumes:
  #       - mysql-data:/var/lib/mysql
  #     user: '${UID_GID}'
  #     ports:
  #       - '3306:3306'
  #     environment:
  #       MYSQL_ROOT_PASSWORD: 'justapassword'
  #     networks:
  #       - common
  #     restart: always
  redis:
    image: bitnami/redis
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - common
    env_file:
      - .env
    restart: always
  mongo:
    container_name: mongo
    image: bitnami/mongodb:latest
    volumes:
      - 'mongodb-data:/data/db'
    ports:
      - '27017:27017'
    networks:
      - common
    env_file:
      - .env
    restart: always
  # mongo-rs:
  #   container_name: mongo-rs
  #   image: linhld/mongodb-replicaset:development
  #   hostname: mongo-rs
  #   volumes:
  #     - 'mongodb-replica-data:/data'
  #   ports:
  #     - '27001:27001'
  #     - '27002:27002'
  #     - '27003:27003'
  #   networks:
  #     - common
  #   env_file:
  #     - .env
  #   extra_hosts:
  #     - 'mongo-rs:127.0.0.1'
  #   restart: always
  # mssql:
  #   container_name: mssql
  #   image: mcr.microsoft.com/mssql/server:2019-CU9-ubuntu-16.04
  #   # volumes are not supported on macOS
  #   # volumes:
  #   #   - mssql-data:/var/opt/mssql/data/
  #   env_file:
  #     - .env
  #   ports:
  #     - 1433:1433
  #   command: /bin/bash -c '/opt/mssql/bin/sqlservr & echo "wait $$MSSQL_SLEEP sec for DB to start "; sleep $$MSSQL_SLEEP; /opt/mssql-tools/bin/sqlcmd -U sa -P $$SA_PASSWORD -d tempdb -q "EXIT(CREATE DATABASE $$MSSQL_DATABASE)"; wait;'
  #   networks:
  #     - common
  #   restart: always
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data/
    ports:
      - 9200:9200
      - 9300:9300
    env_file:
      - .env
    networks:
      - common
    restart: always
  # kafka:
  #   container_name: kafka
  #   image: confluentinc/cp-kafka:5.5.3
  #   ports:
  #     - 9092:9092
  #   env_file:
  #     - .env
  #   networks:
  #     - common
  #   restart: always
  # zookeeper:
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:5.5.3
  #   env_file:
  #     - .env
  #   networks:
  #     - common
  #   restart: always
  # jhipster-registry:
  #   container_name: jhipster-registry
  #   image: jhipster/jhipster-registry:v6.7.1
  #   volumes:
  #     - ./central-server-config:/central-config
  #   # When run with the "dev" Spring profile, the JHipster Registry will
  #   # read the config from the local filesystem (central-server-config directory)
  #   # When run with the "prod" Spring profile, it will read the configuration from a Git repository
  #   # See https://www.jhipster.tech/jhipster-registry/#spring-cloud-config
  #   env_file:
  #     - .env
  #   ports:
  #     - 8761:8761
  #   networks:
  #     - common
  #   restart: always
  keycloak:
    container_name: keycloak
    image: jboss/keycloak:14.0.0
    command:
      [
        '-b',
        '0.0.0.0',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=dir',
        '-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config',
        '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        '-Djboss.socket.binding.port-offset=1000',
        '-Dkeycloak.profile.feature.upload_scripts=enabled',
      ]
    volumes:
      - ./realm-config:/opt/jboss/keycloak/realm-config
      - ./keycloak-theme/keycloak-custom:/opt/jboss/keycloak/themes/keycloak-custom
      - ./keycloak-theme/base-custom/account/messages:/opt/jboss/keycloak/themes/base/account/messages
      - ./keycloak-theme/base-custom/admin/messages:/opt/jboss/keycloak/themes/base/admin/messages
      - ./keycloak-theme/base-custom/email/messages:/opt/jboss/keycloak/themes/base/email/messages
      - ./keycloak-theme/base-custom/login/messages:/opt/jboss/keycloak/themes/base/login/messages
      - keycloak-data:/var/lib/keycloak/data
    env_file:
      - .env
    ports:
      - 9080:9080
      - 9443:9443
      - 10990:10990
    depends_on:
      - postgres
    networks:
      - common
    restart: always
  postgres:
    container_name: postgresql
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./script-postgresql:/docker-entrypoint-initdb.d
    env_file:
      - .env
    ports:
      - 5432:5432
    networks:
      - common
    restart: always
  graylog:
    container_name: graylog
    image: graylog/graylog:4.0
    volumes:
      - graylog_data:/usr/share/graylog/data
    env_file:
      - .env
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    links:
      - mongo:mongo
      - elasticsearch
    networks:
      - common
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
